/*
 * generated by Xtext 2.25.0
 */
package org.piacere.dsl.scoping;

import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.IResourceDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.FilteringScope;
import org.piacere.dsl.rMDF.CImport;
import org.piacere.dsl.rMDF.CNode;
import org.piacere.dsl.rMDF.CNodeProperty;
import org.piacere.dsl.rMDF.CNodeTemplate;
import org.piacere.dsl.rMDF.CNodeType;
import org.piacere.dsl.rMDF.CProperty;
import org.piacere.dsl.rMDF.RMDFPackage;

import com.google.inject.Inject;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class RMDFScopeProvider extends AbstractRMDFScopeProvider {	

	@Inject
	IResourceDescription.Manager mgr;
		
	@Override
	public IScope getScope(EObject context, EReference reference) {
		
		if (reference == RMDFPackage.Literals.CNODE_PROPERTY__NAME) {
		
			EObject container = this.getContainer(context);
			if (container == null)
				return IScope.NULLSCOPE;
			
			Map<CProperty, QualifiedName> properties = this.getAllCProperty(container, null);
			return Scopes.scopeFor(properties.keySet(), (s) -> {
				return properties.get(s);
			}, IScope.NULLSCOPE);
		}
		
		if (reference == RMDFPackage.Literals.CNODE__TYPE) {
			return new FilteringScope(this.getImportedScope(context, reference), (s) -> {
				EObject obj = s.getEObjectOrProxy();
				return (obj instanceof CNodeType);
			});
		}
		
		EObject root = EcoreUtil2.getRootContainer(context);
		return new FilteringScope(super.getScope(context, reference), (s) -> {
			EObject inneroot = EcoreUtil2.getRootContainer(s.getEObjectOrProxy());
			return root.equals(inneroot);
		});
	}
	
	/**
	 * Get all CProperty which hangs from the given container, even the nested
	 * CProperty when using complex resources
	 * @param container
	 * @return list of CProperty
	 */
	protected Map<CProperty, QualifiedName> getAllCProperty(EObject container, QualifiedName upper) {
		Map<CProperty, QualifiedName> properties = EcoreUtil2.getAllContentsOfType(container, CProperty.class)
				.stream()
				.collect(Collectors.toMap(Function.identity(), (p) -> {
					if (upper == null)
						return QualifiedName.create(p.getName());
					return upper.append(p.getName());
				}));
		
		List<CNodeTemplate> nodes = EcoreUtil2.getAllContentsOfType(container, CNodeTemplate.class);
		nodes.forEach((n) -> {
			QualifiedName acc;
			if (upper == null)
				acc = QualifiedName.create(n.getName());
			else acc = upper.append(n.getName());
			
			if (n.getTemplate().getType() != null)
				properties.putAll(this.getAllCProperty(n.getTemplate().getType(), acc));
		});
		return properties;
	}
	
	/**
	 * Returns a scope of the given context only for imported namespace
	 * 
	 * @param context the element from which an element shall be referenced
	 * @param reference the reference for which to get the scope
	 * @return
	 */
	protected IScope getImportedScope(EObject context, EReference reference) {
		EObject root = EcoreUtil2.getRootContainer(context);
		List<CImport> imports = EcoreUtil2.getAllContentsOfType(root, CImport.class);
		return new FilteringScope(super.getScope(context, reference), (s) -> {
			// If it is on the same file, we do not need an import
			EObject inneroot = EcoreUtil2.getRootContainer(s.getEObjectOrProxy());
			if (root.equals(inneroot))
				return true;
			
			return imports.stream().anyMatch((i) -> {		
				if (i.getImportedName() == null)
					return false;
				QualifiedName importedName = QualifiedName.create(i.getImportedName().split("\\."));
				if (importedName.getLastSegment().equalsIgnoreCase("*")) {
					importedName = importedName.skipLast(1);
					return s.getQualifiedName().startsWithIgnoreCase(importedName);
				} else {
					return s.getQualifiedName().equals(importedName);
				}
			});
		});
	}
	
	/**
	 * Get container of a given EObject. The container could be a nested property
	 * which is declared with a Datatype or a CNode.
	 * @param obj
	 * @return the container object
	 */
	protected EObject getContainer(EObject obj) {
		
		// If the type is not declared return null 
		if (obj instanceof CNode) {
			CNode node = (CNode) obj;
			return node.getType();
		}
		
		CNodeProperty property = EcoreUtil2.getContainerOfType(obj, CNodeProperty.class);
		CProperty cproperty = (CProperty) property.eGet(RMDFPackage.Literals.CNODE_PROPERTY__NAME, false);
		
		// If it is a nested property return CProperty
		if (cproperty.getName() != null && cproperty.getProperty().getType().getDatatype() != null)
			return cproperty.getProperty().getType().getDatatype();
		// If it is not a nested property unroll
		else 
			return this.getContainer(obj.eContainer());
	}
	
}
