/**
 * Resource Model Definition
 *
 * Author: Tasio Mendez (Politecnico di Milano)
 * URL: https://github.com/tasiomendez/
 * Version: 1.0
 */

grammar org.piacere.dsl.RMDF with org.eclipse.xtext.common.Terminals

generate rMDF "http://www.piacere.org/dsl/RMDF"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

RMDFModel:
	('metadata:' 
		BEGIN
			metadata=CMetadata
		END
	) &
	('provider:'
		BEGIN
			provider=CProvider
		END
	)? &
	('imports:'
		BEGIN
			imports=CImports
		END
	)? &
	('data_types:'
		BEGIN 
			datatypes=CDataTypes
		END
	)? & 
	('node_types:' 
		BEGIN
			nodetypes=CNodeTypes
		END
	)?
;

// METADATA Block
// ---

CMetadata:
	('_version:' version=CSTRING) &
	('_provider:' provider=[CProvider|ID])? &
	('_description:' description=CSTRING)?
;

// PROVIDER Definitions
// ---

CProvider:
	('alias:' name=ID) &
	('features:' 
		BEGIN
			features+=CFeature+
		END
	)?
;

CFeature:
	(name=ID ':'
		BEGIN 
			property=CPropertyBody
		END
	)
;

// IMPORTS Block
// ---

CImports:
	(imports+=CImport)+
;

CImport:
	'-' importedName=QualifiedNameWithWildcard
;

// DATATYPES Block
// ---
		
CDataTypes:
	(datatypes+=CDataType)+
;

CDataType:
	name=CQualifiedName ':' 
	BEGIN
		data=CDataTypeData
	END
;

CDataTypeData:
	('description:' description=CSTRING)? &
	('properties:' 
		BEGIN
			properties+=CProperty+
		END
	)
;

// NODETYPES Block
// ---

CNodeTypes:
	(nodetypes+=CNodeType)+
;

CNodeType:
	name=CQualifiedName ':'
	BEGIN 
		data=CNodeTypeData
	END
;

CNodeTypeData:
	('description:' description=CSTRING) &
	('extends:' superType=[CNodeType|CQualifiedName])? &
	('properties:'
		BEGIN 
			(properties+=CProperty)+
		END
	)? &
	('node_templates:' 
		BEGIN
			nodes=CNodeTemplates
		END
	)?
;

// Properties Definition
// ---

CProperty:
	(name=ID ':'
		BEGIN 
			property=CPropertyBody
		END
	)
;

CPropertyBody:
	('type:' type=CValueData) &
	('default:' default=CValueExpression)? &
	('description:' description=CSTRING)? &
	('required:' required=CBOOLEAN)? & 
	('multiple:' multiple=CBOOLEAN)?
;

CValueData:
	predefined=CValueDataPredefined | datatype=[CDataType|CQualifiedName]
;

// Node Templates Definition
// ---

CNodeTemplates:
	(nodes+=CNodeTemplate)+
;

CNodeTemplate:
	name=ID ':'
	BEGIN
		template=CNode
	END
;

CNode:
	('type:' type=[CNodeType|CQualifiedName] ) &
	('properties:' 
		BEGIN
			(properties+=CNodeProperty)+
		END
	)? &
	('relationships:' 
		BEGIN
			relationships=CNodeRelationships
		END
	)? 
	('interfaces:'
		BEGIN
			interfaces=CNodeInterfaces
		END
	)?
;

// Node Properties

CNodeProperty:
	name=[CProperty|CQualifiedName] ':' value=CNodePropertyValue
;

CNodePropertyValue:
	CNodePropertyValueInline | CNodeNestedProperty
;

CNodePropertyValueInline:
	CNodePropertyValueInlineSingle | CMultipleValueExpression
;

CNodePropertyValueInlineSingle:
	CValueExpression | CIntrinsicFunctions
;

CNodeNestedProperty:
	 BEGIN
	 	properties+=(CNodeProperty)+
	 END
;

CMultipleValueExpression:
	BEGIN
		('-' values+=(CMultipleNestedProperty | CNodePropertyValueInlineSingle))+
	END
;

CMultipleNestedProperty:
	(first=CNodeProperty)
	(rest=CNodeNestedProperty)?
;

CIntrinsicFunctions:
	CNodeCrossRefGetValue | CNodeCrossRefGetAttribute | CConcatValues
;

CNodeCrossRefGetValue:
	"{{" "get_value:" (super?="super" "::")? crossvalue=([CProperty|CQualifiedName]) "}}"
;

CNodeCrossRefGetAttribute:
	"{{" "get_attribute:" node=[CNodeTemplate|ID] '.' attr=CQualifiedName "}}"
;

CConcatValues:
	"{{" "concat:" first=CNodePropertyValueInlineSingle ("," list+=CNodePropertyValueInlineSingle)* "}}"
;

// Node Relationships

CNodeRelationships:
	(relationships+=CNodeRelationship)+
;

CNodeRelationship:
	name=ID ':' value=[CNodeTemplate|ID]
;

// Interfaces

CNodeInterfaces:
	(interfaces+=CNodeInterface)+
;

CNodeInterface:
	name=CQualifiedName ':'
	BEGIN
		interface=CInterface
	END
;

CInterface:
	('configure:'
		BEGIN
			configure=CInterfaceConfigure
		END
	)
;

CInterfaceConfigure:
	('ansible_path:' path=CSTRING) &
	('executor:' executor=[CNodeType|CQualifiedName])? &
	('run_data:'
		BEGIN
			(data+=CConfigureDataVariable)+
		END
	)?
;

CConfigureDataVariable:
	name=ID ':' value=CNodePropertyValueInlineSingle
;

// Terminal & Custom types
// ---

CQualifiedName:
	ID ('.' ID)*
;

QualifiedNameWithWildcard:
	CQualifiedName '.*'?
;

CValueDataPredefined:
	'String' | 'Integer' | 'Boolean'
;

CValueExpression:
	CSTRING | CFLOAT | CBOOLEAN | CSIGNEDINT
;

CSTRING:
	value = STRING
;

CFLOAT: 
	value = FLOAT	
;

CBOOLEAN: 
	value = BOOLEAN
;

CSIGNEDINT:
	value = SIGNEDINT
;

terminal BOOLEAN returns ecore::EBoolean:
	'true' | 'false';
	
SIGNEDINT returns ecore::EInt: '-'? INT;

FLOAT returns ecore::EFloat: INT ('.' INT)?;

// Block with indentation
terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';
